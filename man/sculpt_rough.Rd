% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sculpting.R
\name{sculpt_rough}
\alias{sculpt_rough}
\title{Create a rough model}
\usage{
sculpt_rough(
  dat,
  model_predict_fun,
  n_ice = 10,
  seed = NULL,
  verbose = 0,
  allow_par = FALSE,
  model_predict_fun_export = NULL,
  data_as_marginals = FALSE
)
}
\arguments{
\item{dat}{Data to create the rough model from.
Must be a product marginal dataset (see \code{sample_marginals})
with covariates only (i.e. without response).}

\item{model_predict_fun}{Function that returns predictions given a dataset.}

\item{n_ice}{Number of ICE curves to generate. Defaults to 10.}

\item{seed}{(\code{NULL}) or seed for exact reproducibility.}

\item{verbose}{(\code{integer}) 0 for silent run, > 0 for messages.}

\item{allow_par}{(\code{logical}) Allow parallel computation? Defaults to \code{FALSE}.}

\item{model_predict_fun_export}{For parallel computation only.
If there is a parallel backend registered (see \code{parallel_set()}),
then use this to export variables used in \code{model_predict_fun} (like model).
This is passed to \code{foreach::foreach(..., .export = model_predict_fun_export)}.}

\item{data_as_marginals}{(\code{logical}) Use the provided data \code{dat} as already sampled dataset?
Defaults to \code{FALSE}.}
}
\value{
Object of classes \code{rough} and \code{sculpture}.
}
\description{
Create a rough model
}
\details{
For parallel computation, use \code{\link[=parallel_set]{parallel_set()}} and set \code{allow_par} to \code{TRUE}.
Note that parallel computation may fail if the model is too big and there is not enough memory.
}
\examples{
df <- mtcars
df$vs <- as.factor(df$vs)
model <- rpart::rpart(
  hp ~ mpg + carb + vs,
  data = df,
  control = rpart::rpart.control(minsplit = 10)
)
model_predict <- function(x) predict(model, newdata = x)
covariates <- c("mpg", "carb", "vs")
pm <- sample_marginals(df[covariates], n = 50, seed = 5)

rs <- sculpt_rough(
  dat = pm,
  model_predict_fun = model_predict,
  n_ice = 10,
  seed = 1,
  verbose = 0
)

class(rs)
head(predict(rs))

# lm model without interaction -> additive -> same predictions
model <- lm(hp ~ mpg + carb + vs, data = df)
model_predict <- function(x) predict(model, newdata = x)
covariates <- c("mpg", "carb", "vs")
pm <- sample_marginals(df[covariates], n = 50, seed = 5)

rs <- sculpt_rough(
  dat = pm,
  model_predict_fun = model_predict,
  n_ice = 10,
  seed = 1,
  verbose = 0
)

class(rs)
head(predict(rs))
head(predict(model, pm))

}
