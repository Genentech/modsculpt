[{"path":"https://genentech.github.io/modsculpt/articles/binary.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Binary Response","text":"show apply model sculpting binary endpoint.","code":"library(modsculpt)"},{"path":"https://genentech.github.io/modsculpt/articles/binary.html","id":"data-preparation","dir":"Articles","previous_headings":"","what":"Data preparation","title":"Binary Response","text":"Download compas_test.csv compas_train.csv https://github.com/corels/corels/tree/master/data read R. can use following code : dataset, recidivate.within.two.years binary response want predict, columns features. features factors let’s convert :","code":"train <- read.csv(\"https://raw.githubusercontent.com/corels/corels/master/data/compas_train.csv\") test <- read.csv(\"https://raw.githubusercontent.com/corels/corels/master/data/compas_test.csv\") response <- \"recidivate.within.two.years\" covariates <- c(\"sex\", \"age\", \"juvenile.felonies\", \"juvenile.misdemeanors\", \"juvenile.crimes\", \"priors\", \"current.charge.degree\") train[covariates] <- lapply(train[covariates], as.factor) # reorder levels levels(train$priors) <- c(\"=0\", \"=1\", \"2-3\", \">3\") levels(train$age) <- c(\"18-20\", \"21-22\", \"23-25\", \"26-45\", \">45\")  test[covariates] <- lapply(test[covariates], as.factor) # reorder levels levels(test$priors) <- c(\"=0\", \"=1\", \"2-3\", \">3\") levels(test$age) <- c(\"18-20\", \"21-22\", \"23-25\", \"26-45\", \">45\")"},{"path":[]},{"path":"https://genentech.github.io/modsculpt/articles/binary.html","id":"build-a-base-model","dir":"Articles","previous_headings":"Model Sculpting","what":"Build a base model","title":"Binary Response","text":"Firstly, check NAs: Secondly, check zero variance columns (columns factors): Now let’s build strong learner via xgboost (already predefined parameters): can see variable importances based xgboost:","code":"anyNA(train) #> [1] FALSE any(sapply(train, \\(x) length(unique(x)) == 1)) #> [1] FALSE requireNamespace(\"xgboost\") #> Loading required namespace: xgboost set.seed(567) est <- xgboost::xgb.train(   params = list(     booster = \"gbtree\",     objective = \"binary:logistic\",     eta = 0.03,     gamma = 0.75,     max_depth = 2,     min_child_weight = 15,     colsample_bytree = 1,     subsample = 0.5   ),   nrounds = 100,   data = xgboost::xgb.DMatrix(     data = model.matrix(~ . - 1, data = train[covariates]),     label = train[[response]]   ),   verbose = 0,   nthread = 2 ) xgboost::xgb.plot.importance(xgboost::xgb.importance(model = est))"},{"path":"https://genentech.github.io/modsculpt/articles/binary.html","id":"build-a-rough-model","dir":"Articles","previous_headings":"Model Sculpting","what":"Build a rough model","title":"Binary Response","text":"Let’s sculpt xgboost model. Firstly, need define prediction function takes data input returns predictions based trained model (case, xgboost ). binary response, worth sculpt model log-odds scale instead probability scale. Secondly, need generate product marginals, grid values sampled independently per column original dataset. sculpt model using generated product marginals: Let’s display ICE PDP curves understand individual features influence model. Remember y-axis (“Feature Score”) describes log odds.  can see direct variable importance:  can compare variable importances generated xgboost.","code":"xgb_pred <- function(x) {   probs <- predict(est, newdata = model.matrix(~ . - 1, data = x))   log(probs / (1 - probs)) # convert to log of odds } pm <- sample_marginals(   dat = train[covariates], # generate product marginals based on original training data   n = 10000, # size of the grid   seed = 372 # for exact reproducibility ) rough_sculpture <- sculpt_rough(   dat = pm,   model_predict_fun = xgb_pred,   n_ice = 10, # number of ICE curves - increasing this number may increase the stability of the sculpture   seed = 5 # for exact reproducibility ) ip <- g_ice(rough_sculpture) ip$discrete + ggplot2::theme(text = ggplot2::element_text(size = 15)) vip <- g_var_imp(rough_sculpture, textsize = 15) grid::grid.draw(vip)"},{"path":"https://genentech.github.io/modsculpt/articles/binary.html","id":"build-a-polished-model","dir":"Articles","previous_headings":"Model Sculpting","what":"Build a polished model","title":"Binary Response","text":"Let’s jump polished model now, using top 4 features:","code":"polished_sculpture <- sculpt_polished(   rough_sculpture,   vars = c(\"priors\", \"juvenile.crimes\", \"age\", \"sex\") )"},{"path":"https://genentech.github.io/modsculpt/articles/binary.html","id":"compare-results","dir":"Articles","previous_headings":"Model Sculpting","what":"Compare results","title":"Binary Response","text":"Let’s compare predictions original model vs sculpted models (\\(R^2 = 1\\) mean exact match xgboost predictions).  Test dataset Finally, compare performance model (using quadratic loss): Remember predictions refer log odds. convert probabilities, need transform : Since “Strong learner” model interactions, table suggests interactions significant, since performance “Rough model” almost . , using “Polished model” 4 selected features reduces model complexity without significant performance loss.","code":"g_additivity(   sp = list(predict(rough_sculpture, pm), predict(polished_sculpture, pm)),   lp = xgb_pred(pm),   descriptions = c(\"Rough Model\", \"Polished model\"),   cex = 4 ) +   ggplot2::theme(text = ggplot2::element_text(size = 15)) R2q <- function(y, y_hat) {   metrics_R2(score_fun = \"score_quadratic\", y = y, y_hat = y_hat) } inv.logit <- function(x) 1 / (1 + exp(-x)) metrics_test <- data.frame(   Model = c(     \"Strong learner\",     \"Rough model\",     \"Polished model\"   ),   R2 = c(     R2q(test[[response]], inv.logit(xgb_pred(test[covariates]))),     R2q(test[[response]], inv.logit(predict(rough_sculpture, newdata = test[covariates]))),     R2q(test[[response]], inv.logit(predict(polished_sculpture, newdata = test[covariates])))   ) ) knitr::kable(metrics_test, align = \"lc\")"},{"path":"https://genentech.github.io/modsculpt/articles/modsculpt.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Introduction to Model Sculpting","text":"goal vignette make familiar model sculpting. using publicly available “bike sharing” dataset.","code":"library(modsculpt)"},{"path":"https://genentech.github.io/modsculpt/articles/modsculpt.html","id":"data-preparation","dir":"Articles","previous_headings":"","what":"Data preparation","title":"Introduction to Model Sculpting","text":"Download dataset http://archive.ics.uci.edu/ml/datasets/Bike+Sharing+Dataset, unzip, load day.csv. can use following code steps : Firstly, check dimensionality: look dataset dataset, instant primary key, cnt response want predict, columns season:windspeed features can use prediction. Let’s get rid instant, dteday, casual registered: Lastly, need properly encode discrete variables factors: treat following variables factors: goal document show model sculpting can used. Therefore, explore bike rentals dataset rather go ahead model sculpting.","code":"download.file(   \"http://archive.ics.uci.edu/ml/machine-learning-databases/00275/Bike-Sharing-Dataset.zip\",   destfile = \"bike_rentals.zip\" ) unzip(\"bike_rentals.zip\") df <- read.csv(\"day.csv\") dim(df) #> [1] 731  16 head(df) #>   instant     dteday season yr mnth holiday weekday workingday weathersit #> 1       1 2011-01-01      1  0    1       0       6          0          2 #> 2       2 2011-01-02      1  0    1       0       0          0          2 #> 3       3 2011-01-03      1  0    1       0       1          1          1 #> 4       4 2011-01-04      1  0    1       0       2          1          1 #> 5       5 2011-01-05      1  0    1       0       3          1          1 #> 6       6 2011-01-06      1  0    1       0       4          1          1 #>       temp    atemp      hum windspeed casual registered  cnt #> 1 0.344167 0.363625 0.805833 0.1604460    331        654  985 #> 2 0.363478 0.353739 0.696087 0.2485390    131        670  801 #> 3 0.196364 0.189405 0.437273 0.2483090    120       1229 1349 #> 4 0.200000 0.212122 0.590435 0.1602960    108       1454 1562 #> 5 0.226957 0.229270 0.436957 0.1869000     82       1518 1600 #> 6 0.204348 0.233209 0.518261 0.0895652     88       1518 1606 response <- \"cnt\" covariates <- c(\"season\", \"yr\", \"mnth\", \"holiday\", \"weekday\", \"workingday\", \"weathersit\", \"temp\", \"atemp\", \"hum\", \"windspeed\") df$instant <- NULL df$dteday <- NULL df$casual <- NULL df$registered <- NULL idx_factor <- vapply(df, function(x) length(unique(x)) <= 12, logical(1)) df[idx_factor] <- lapply(df[idx_factor], as.factor) print(names(idx_factor)[idx_factor]) #> [1] \"season\"     \"yr\"         \"mnth\"       \"holiday\"    \"weekday\"    #> [6] \"workingday\" \"weathersit\""},{"path":[]},{"path":"https://genentech.github.io/modsculpt/articles/modsculpt.html","id":"build-a-base-model","dir":"Articles","previous_headings":"Model Sculpting","what":"Build a base model","title":"Introduction to Model Sculpting","text":"can move model sculpting, need actual model can sculpt. Let’s build xgboost model. Yet start, good check following: Investigate NAs. Check NAs following code: model sculpting, remove impute NAs . Remove constant (zero-variance) columns. Check following code: model sculpting, remove zero-variance columns .","code":"anyNA(df) #> [1] FALSE # for continuous features lapply(df[!idx_factor], function(x) var(x) < 1e-10) #> $temp #> [1] FALSE #>  #> $atemp #> [1] FALSE #>  #> $hum #> [1] FALSE #>  #> $windspeed #> [1] FALSE #>  #> $cnt #> [1] FALSE # for discrete features lapply(df[idx_factor], function(x) length(unique(x)) == 1) #> $season #> [1] FALSE #>  #> $yr #> [1] FALSE #>  #> $mnth #> [1] FALSE #>  #> $holiday #> [1] FALSE #>  #> $weekday #> [1] FALSE #>  #> $workingday #> [1] FALSE #>  #> $weathersit #> [1] FALSE"},{"path":"https://genentech.github.io/modsculpt/articles/modsculpt.html","id":"build-a-strong-learner","dir":"Articles","previous_headings":"Model Sculpting > Build a base model","what":"Build a strong learner","title":"Introduction to Model Sculpting","text":"vignette, split available data train / holdout sets ratio 70 / 30. Let’s quickly (.e. hyperparameters already predefined) build xgboost model bike rentals dataset: can see variable importances based xgboost:","code":"set.seed(9876) idx_holdout <- sample(nrow(df), size = ceiling(0.3 * nrow(df))) df_h <- df[idx_holdout, ] df_t <- df[-idx_holdout, ] requireNamespace(\"xgboost\") #> Loading required namespace: xgboost set.seed(567) est <- xgboost::xgb.train(   params = list(     booster = \"gbtree\",     objective = \"reg:squarederror\",     eta = 0.05,     gamma = 3,     max_depth = 3,     min_child_weight = 5,     colsample_bytree = 1,     subsample = 0.7   ),   nrounds = 100,   data = xgboost::xgb.DMatrix(     data = model.matrix(~ . - 1, data = df_t[covariates]),     label = df_t[[response]]   ),   verbose = 0,   nthread = 2 ) xgboost::xgb.plot.importance(xgboost::xgb.importance(model = est))"},{"path":"https://genentech.github.io/modsculpt/articles/modsculpt.html","id":"build-a-rough-model","dir":"Articles","previous_headings":"Model Sculpting","what":"Build a rough model","title":"Introduction to Model Sculpting","text":"Let’s sculpt xgboost model. Firstly, need define prediction function takes data input returns predictions based trained model (case, xgboost ): Secondly, need generate product marginals, grid values sampled independently per column original dataset. detailed information , please check function documentation. Check dimensionality grid: number rows 10000 requested, number columns number covariates. sculpt model using generated product marginals: returned object (nested) list used features couple elements feature: Let’s display ICE PDP curves understand individual features influence model:   also like see direct variable importance, quantity defined model sculpting. can interpreted feature importance based provided model  can compare variable importances generated xgboost.","code":"xgb_pred <- function(x) {   predict(est, newdata = model.matrix(~ . - 1, data = x)) } pm <- sample_marginals(   dat = df_t[covariates], # generate product marginals based on original training data   n = 10000, # size of the grid   seed = 372 # for exact reproducibility ) dim(pm) #> [1] 10000    11 rough_sculpture <- sculpt_rough(   dat = pm,   model_predict_fun = xgb_pred,   n_ice = 10, # number of ICE curves - increasing this number may increase the stability of the sculpture   seed = 5 # for exact reproducibility ) print(rough_sculpture) #> Rough sculpture with 11 variables print(typeof(rough_sculpture)) #> [1] \"list\" print(str(rough_sculpture, 1)) #> List of 11 #>  $ season    :List of 7 #>  $ yr        :List of 7 #>  $ mnth      :List of 7 #>  $ holiday   :List of 7 #>  $ weekday   :List of 7 #>  $ workingday:List of 7 #>  $ weathersit:List of 7 #>  $ temp      :List of 7 #>  $ atemp     :List of 7 #>  $ hum       :List of 7 #>  $ windspeed :List of 7 #>  - attr(*, \"offset\")= num 4510 #>  - attr(*, \"class\")= chr [1:3] \"rough\" \"sculpture\" \"list\" #>  - attr(*, \"var_imp\")=Classes 'data.table' and 'data.frame': 11 obs. of  4 variables: #>   ..- attr(*, \".internal.selfref\")=<externalptr>  #>  - attr(*, \"cumul_R2\")=Classes 'data.table' and 'data.frame':    11 obs. of  2 variables: #>   ..- attr(*, \".internal.selfref\")=<externalptr>  #>  - attr(*, \"range\")=Classes 'data.table' and 'data.frame':   11 obs. of  2 variables: #>   ..- attr(*, \".internal.selfref\")=<externalptr>  #> NULL ip <- g_ice(rough_sculpture) ip$continuous + ggplot2::theme(text = ggplot2::element_text(size = 15)) ip$discrete + ggplot2::theme(text = ggplot2::element_text(size = 15)) vip <- g_var_imp(rough_sculpture, textsize = 15) grid::grid.draw(vip)"},{"path":"https://genentech.github.io/modsculpt/articles/modsculpt.html","id":"build-a-detailed-model","dir":"Articles","previous_headings":"Model Sculpting","what":"Build a detailed model","title":"Introduction to Model Sculpting","text":"next step model sculpting smooth individual PDP curves. ensures clear interpretation sculpted results. model call detailed model. can freely choose smoothers like use, need write function . far, prepared two versions: linear models (using lm) generalized additive models (using mgcv::gam smoothness).","code":""},{"path":"https://genentech.github.io/modsculpt/articles/modsculpt.html","id":"detailed-model-using-lm-smoother","dir":"Articles","previous_headings":"Model Sculpting > Build a detailed model","what":"Detailed model using lm smoother","title":"Introduction to Model Sculpting","text":"Let’s start linear smoother create detailed model using lm smoother based rough model : Let’s look results.   also show direct variable importance detailed sculpture lm smoother. Remember use product marginals analysing direct variable importance.","code":"detailed_sculpture_lm <- sculpt_detailed_lm(rough_sculpture) dsp_lm <- g_component(detailed_sculpture_lm) dsp_lm$continuous + ggplot2::theme(text = ggplot2::element_text(size = 15)) dsp_lm$discrete + ggplot2::theme(text = ggplot2::element_text(size = 15)) vip_lm <- g_var_imp(detailed_sculpture_lm, textsize = 15) grid::grid.draw(vip_lm)"},{"path":"https://genentech.github.io/modsculpt/articles/modsculpt.html","id":"detailed-model-using-gam-smoother","dir":"Articles","previous_headings":"Model Sculpting > Build a detailed model","what":"Detailed model using gam smoother","title":"Introduction to Model Sculpting","text":"going just different smoother - using mgcv::gam smoothness mgcv::s. Let’s look results.   show direct variable importance detailed sculpture gam smoother.","code":"detailed_sculpture_gam <- sculpt_detailed_gam(rough_sculpture) #> Loading required namespace: mgcv dsp_gam <- g_component(detailed_sculpture_gam) dsp_gam$continuous + ggplot2::theme(text = ggplot2::element_text(size = 15)) dsp_gam$discrete + ggplot2::theme(text = ggplot2::element_text(size = 15)) vip_gam <- g_var_imp(detailed_sculpture_gam, textsize = 15) grid::grid.draw(vip_gam)"},{"path":"https://genentech.github.io/modsculpt/articles/modsculpt.html","id":"detailed-model-using-arbitrary-smoother","dir":"Articles","previous_headings":"Model Sculpting > Build a detailed model","what":"Detailed model using arbitrary smoother","title":"Introduction to Model Sculpting","text":"can also define arbitrary smoother build detailed model . can use function sculpt_detailed_generic, works similarly sculpt_detailed_lm sculpt_detailed_gam, just need provide definitions smoother (parameter smoother_fun) smoother prediction function (parameter smoother_predict_fun). See documentation info.","code":""},{"path":"https://genentech.github.io/modsculpt/articles/modsculpt.html","id":"build-a-polished-model","dir":"Articles","previous_headings":"Model Sculpting","what":"Build a polished model","title":"Introduction to Model Sculpting","text":"variable importances, can reduce model terms keeping highest performance possible. example, decide go detailed model using gam smoothers, aim least 95% performance original model, see graph can take yr, temp, season, hum, atemp, windspeed weathersit features.","code":"polished_sculpture <- sculpt_polished(   detailed_sculpture_gam,   vars = c(\"yr\", \"temp\", \"season\", \"hum\", \"atemp\", \"windspeed\", \"weathersit\") ) length(polished_sculpture) # only 7 out of 11 variables included #> [1] 7"},{"path":"https://genentech.github.io/modsculpt/articles/modsculpt.html","id":"compare-results","dir":"Articles","previous_headings":"Model Sculpting","what":"Compare results","title":"Introduction to Model Sculpting","text":"Let’s compare predictions original model vs sculpted models (\\(R^2 = 1\\) mean exact match xgboost predictions).  can see influence feature sculpted model.","code":"g_additivity(   sp = list(     predict(rough_sculpture, pm),     predict(detailed_sculpture_lm, pm),     predict(detailed_sculpture_gam, pm),     predict(polished_sculpture, pm)   ),   lp = xgb_pred(pm),   descriptions = c(     \"Rough Model\",     \"Detailed model - lm\",     \"Detailed model - gam\",     \"Polished model\"   ),   cex = 4 ) +   ggplot2::theme(text = ggplot2::element_text(size = 15)) scp <- g_comparison(   sculptures = list(rough_sculpture, detailed_sculpture_lm, detailed_sculpture_gam),   descriptions = c(\"Rough\", \"lm\", \"gam\") ) scp$continuous + ggplot2::theme(text = ggplot2::element_text(size = 15)) scp$discrete + ggplot2::theme(text = ggplot2::element_text(size = 15))"},{"path":"https://genentech.github.io/modsculpt/articles/modsculpt.html","id":"conclusion","dir":"Articles","previous_headings":"Model Sculpting > Compare results","what":"Conclusion","title":"Introduction to Model Sculpting","text":"compare performance strong learner sculpted models train holdout sets. use score_quadratic() metrics_R2() package, traditional coefficient determination Train dataset Holdout dataset Note model interaction XGBoost (Strong learner), models purely additive (.e. without interactions), much easier interpret. Based results , seems removing interaction lowers performance slightly. Depending use case, may better use less complex interpretable polished model original strong learner.","code":"R2q <- function(y, y_hat) {   metrics_R2(score_fun = \"score_quadratic\", y = y, y_hat = y_hat) }  metrics_train <- data.frame(   Model = c(     \"Strong learner\",     \"Rough model\",     \"Detailed model - lm\",     \"Detailed model - gam\",     \"Polished model\"   ),   R2 = c(     R2q(df_t[[response]], xgb_pred(df_t[covariates])),     R2q(df_t[[response]], predict(rough_sculpture, newdata = df_t[covariates])),     R2q(df_t[[response]], predict(detailed_sculpture_lm, newdata = df_t[covariates])),     R2q(df_t[[response]], predict(detailed_sculpture_gam, newdata = df_t[covariates])),     R2q(df_t[[response]], predict(polished_sculpture, newdata = df_t[covariates]))   ) ) knitr::kable(metrics_train, align = \"lcc\") metrics_test <- data.frame(   Model = c(     \"Strong learner\",     \"Rough model\",     \"Detailed model - lm\",     \"Detailed model - gam\",     \"Polished model\"   ),   R2 = c(     R2q(df_h[[response]], xgb_pred(df_h[covariates])),     R2q(df_h[[response]], predict(rough_sculpture, newdata = df_h[covariates])),     R2q(df_h[[response]], predict(detailed_sculpture_lm, newdata = df_h[covariates])),     R2q(df_h[[response]], predict(detailed_sculpture_gam, newdata = df_h[covariates])),     R2q(df_h[[response]], predict(polished_sculpture, newdata = df_h[covariates]))   ) ) knitr::kable(metrics_test, align = \"lcc\")"},{"path":"https://genentech.github.io/modsculpt/articles/modsculpt.html","id":"density-plot","dir":"Articles","previous_headings":"Model Sculpting","what":"Density plot","title":"Introduction to Model Sculpting","text":"package also functionality visualize data located model trained.","code":"density_plots <-   g_density_ice_plot_list(rough_sculpture, df_t,     c(\"yr\", \"temp\", \"season\", \"hum\", \"atemp\", \"windspeed\", \"weathersit\"),     task = \"regression\"   )  grid::grid.draw(   gridExtra::arrangeGrob(     grobs = density_plots[c(\"yr\", \"temp\", \"season\", \"hum\")]   ) )"},{"path":"https://genentech.github.io/modsculpt/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ondrej Slama. Author, maintainer. Kenta Yoshida. Author. Christina Rabe. Author. Michel Friesenhahn. Author. F. Hoffmann-La Roche AG. Copyright holder, funder.","code":""},{"path":"https://genentech.github.io/modsculpt/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Slama O, Yoshida K, Rabe C, Friesenhahn M (2024). modsculpt: Direct Indirect Additive Modeling Model Sculpting. R package version 0.1, https://genentech.github.io/modsculpt.","code":"@Manual{,   title = {modsculpt: Direct and Indirect Additive Modeling with Model Sculpting},   author = {Ondrej Slama and Kenta Yoshida and Christina Rabe and Michel Friesenhahn},   year = {2024},   note = {R package version 0.1},   url = {https://genentech.github.io/modsculpt}, }"},{"path":"https://genentech.github.io/modsculpt/index.html","id":"modsculpt-","dir":"","previous_headings":"","what":"{modsculpt} Model Sculpting","title":"{modsculpt} Model Sculpting","text":"Additive modeling algorithms essential part machine learning modeler’s tool kit working tabular data. predictive models excellent intrinsic interpretability often optimal near optimal performance. cases, best additive model performance attained models linear functions input features. linear additive models can fit using classical statistical models, many features relative size training dataset, regularized methods elastic net, many features. However, also many cases additive functions need flexibly allow : Non linearity improved performance, Imposing constraints additive component functions greater trustworthiness, Handling many features, Identification irrelevant unnecessary features model sparsity. address need developed Model Sculpting method building additive models. model building pipeline consisting following steps: Build strong learner optimal performance. can blackbox delivers optimal performance. Often use tree ensemble XGBoost trained Bayesian hyperparameter tuning. Extract additive model best approximates strong learner. call rough model. Use direct variable importance measure identify features negligible impact rough model. Effectively identify rough model additive components nearly flat. Obtain final polished model removing unnecessary features rough model potentially smoothing additive components remaining features. univariate smoother can used, including facilities ensure constraints monotonicity. package provides code implement Model Sculpting pipeline.","code":""},{"path":"https://genentech.github.io/modsculpt/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"{modsculpt} Model Sculpting","text":"reproducibility, refer specific version tag (latest v0.1), example","code":"remotes::install_github(repo = \"genentech/modsculpt\") remotes::install_github(repo = \"genentech/modsculpt\", ref = \"v0.1\")"},{"path":"https://genentech.github.io/modsculpt/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"{modsculpt} Model Sculpting","text":"Please refer https://genentech.github.io/modsculpt can see function reference well introduction vignette.","code":""},{"path":"https://genentech.github.io/modsculpt/index.html","id":"quick-introduction","dir":"","previous_headings":"","what":"Quick Introduction","title":"{modsculpt} Model Sculpting","text":"quickly show build rough detailed model visualize components. detailed explanation, please see vignette.","code":"library(modsculpt)  # use mtcars dataset df <- mtcars df$vs <- as.factor(df$vs) covariates <- c(\"mpg\", \"carb\", \"vs\")  # train simple decision tree model <- rpart::rpart(   hp ~ mpg + carb + vs,   data = df,   control = rpart::rpart.control(minsplit = 10) ) model_predict <- function(x) predict(model, newdata = x)  # create a rough model - extracted additive model from the decision tree pm <- sample_marginals(df[covariates], n = 1e3, seed = 5) rs <- sculpt_rough(   dat = pm,   model_predict_fun = model_predict,   n_ice = 10,   seed = 1,   verbose = 0 )  # show variable importance grid::grid.draw(g_var_imp(rs)) # create two detailed models - a smoothed version of a rough model dsg <- sculpt_detailed_gam(rs) # gam smoothers per variable dsl <- sculpt_detailed_lm(rs)  # lm smoothers per variable  # compare the components comp <- g_comparison(   sculptures = list(rs, dsg, dsl),   descriptions = c(\"Rough\", \"Detailed - gam\", \"Detailed - lm\") ) comp$continuous"},{"path":"https://genentech.github.io/modsculpt/reference/calc_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Create density curves — calc_density","title":"Create density curves — calc_density","text":"Create density curves","code":""},{"path":"https://genentech.github.io/modsculpt/reference/calc_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create density curves — calc_density","text":"","code":"calc_density(new_data_with_pred, var_name, vec_y_expand = NULL)"},{"path":"https://genentech.github.io/modsculpt/reference/calc_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create density curves — calc_density","text":"new_data_with_pred Data prediction make density calculations var_name String specifying variable calculate density vec_y_expand Optional values expand y-axis","code":""},{"path":"https://genentech.github.io/modsculpt/reference/calc_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create density curves — calc_density","text":"Density data plotting","code":""},{"path":"https://genentech.github.io/modsculpt/reference/calc_density.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create density curves — calc_density","text":"amenable 1st-order model without interaction terms, however implemented yet, handling predict() function output binary endpoint","code":""},{"path":"https://genentech.github.io/modsculpt/reference/calc_ice_quantile.html","id":null,"dir":"Reference","previous_headings":"","what":"Create ICE curves at quantiles — calc_ice_quantile","title":"Create ICE curves at quantiles — calc_ice_quantile","text":"Create ICE curves quantiles","code":""},{"path":"https://genentech.github.io/modsculpt/reference/calc_ice_quantile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create ICE curves at quantiles — calc_ice_quantile","text":"","code":"calc_ice_quantile(   object,   new_data,   var_name,   qtiles = seq(0, 1, by = 0.1),   task = \"regression\" )"},{"path":"https://genentech.github.io/modsculpt/reference/calc_ice_quantile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create ICE curves at quantiles — calc_ice_quantile","text":"object Object class sculpture (rough, detailed) new_data Data make quantiles var_name String specifying variable generate ICE qtiles Quantiles generate ICE curves task Prediction task type (regression classification)","code":""},{"path":"https://genentech.github.io/modsculpt/reference/calc_ice_quantile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create ICE curves at quantiles — calc_ice_quantile","text":"Predictions","code":""},{"path":"https://genentech.github.io/modsculpt/reference/calc_ice_quantile.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create ICE curves at quantiles — calc_ice_quantile","text":"amenable 1st-order model without interaction terms, however implemented yet, handling predict() function output binary endpoint","code":""},{"path":"https://genentech.github.io/modsculpt/reference/expand_range.html","id":null,"dir":"Reference","previous_headings":"","what":"Expand the range of values for density plot — expand_range","title":"Expand the range of values for density plot — expand_range","text":"Expand range values density plot","code":""},{"path":"https://genentech.github.io/modsculpt/reference/expand_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expand the range of values for density plot — expand_range","text":"","code":"expand_range(   x,   expand_left_side = 0.1,   expand_right_side = 0.2,   type = c(\"relative\", \"absolute\") )"},{"path":"https://genentech.github.io/modsculpt/reference/expand_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expand the range of values for density plot — expand_range","text":"x numeric vector expand_left_side Fraction expand left hand side expand_right_side Fraction expand right hand side","code":""},{"path":"https://genentech.github.io/modsculpt/reference/expand_range.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expand the range of values for density plot — expand_range","text":"Vector 2 values","code":""},{"path":"https://genentech.github.io/modsculpt/reference/facet_specification.html","id":null,"dir":"Reference","previous_headings":"","what":"Instructions for facet vizualisations — facet_specification","title":"Instructions for facet vizualisations — facet_specification","text":"Instructions facet vizualisations","code":""},{"path":"https://genentech.github.io/modsculpt/reference/facet_specification.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Instructions for facet vizualisations — facet_specification","text":"","code":"facet_specification(   labels = NULL,   ncol = NULL,   sort = \"alphabetical\",   top_k = NULL,   subset = NULL,   scales = \"free_x\" )"},{"path":"https://genentech.github.io/modsculpt/reference/facet_specification.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Instructions for facet vizualisations — facet_specification","text":"labels (NULL) named character vector variable labels. ncol (NULL) number columns facet. sort One \"alphabetical\", \"importance\", \"range\" - sorting facets. top_k (NULL) number important features show. subset (NULL) vector variables show. scales One \"free\", \"free_x\", \"free_y\" - axis scales graphs.","code":""},{"path":"https://genentech.github.io/modsculpt/reference/facet_specification.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Instructions for facet vizualisations — facet_specification","text":"List class facet_specification.","code":""},{"path":"https://genentech.github.io/modsculpt/reference/facet_specification.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Instructions for facet vizualisations — facet_specification","text":"","code":"if (FALSE) { g_ice(   sculpture,   facet_spec = facet_specification(     ncol = 3, # display 3 columns     sort = \"importance\" # sort by importance   ) ) }"},{"path":"https://genentech.github.io/modsculpt/reference/g_additivity.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot additivity scatterplot(-s) with R^2 value(-s) — g_additivity","title":"Plot additivity scatterplot(-s) with R^2 value(-s) — g_additivity","text":"Plot additivity scatterplot(-s) R^2 value(-s)","code":""},{"path":"https://genentech.github.io/modsculpt/reference/g_additivity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot additivity scatterplot(-s) with R^2 value(-s) — g_additivity","text":"","code":"g_additivity(sp, lp, descriptions = NULL, cex = 4, plot_only = TRUE)"},{"path":"https://genentech.github.io/modsculpt/reference/g_additivity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot additivity scatterplot(-s) with R^2 value(-s) — g_additivity","text":"sp Sculpted predictions. Either vector list . lp Learner predictions. Either vector list . size sp. descriptions (Optional) Descriptions models shown plot. size sp sp provided list. cex cex graphical parameter. plot_only (logical) Return plot plot R^2 value? Defaults first (.e. TRUE).","code":""},{"path":"https://genentech.github.io/modsculpt/reference/g_additivity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot additivity scatterplot(-s) with R^2 value(-s) — g_additivity","text":"plot_only, plot. !plot_only, plot data.frame.","code":""},{"path":"https://genentech.github.io/modsculpt/reference/g_additivity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot additivity scatterplot(-s) with R^2 value(-s) — g_additivity","text":"","code":"df <- mtcars df$vs <- as.factor(df$vs) model <- rpart::rpart(   hp ~ mpg + carb + vs,   data = df,   control = rpart::rpart.control(minsplit = 10) ) model_predict <- function(x) predict(model, newdata = x) covariates <- c(\"mpg\", \"carb\", \"vs\") pm <- sample_marginals(df[covariates], n = 50, seed = 5)  rs <- sculpt_rough(   dat = pm,   model_predict_fun = model_predict,   n_ice = 10,   seed = 1,   verbose = 0 )  g_additivity(   sp = predict(rs, pm),   lp = model_predict(pm),   descriptions = \"Product Marginal\" )"},{"path":"https://genentech.github.io/modsculpt/reference/g_comparison.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot comparison of component functions — g_comparison","title":"Plot comparison of component functions — g_comparison","text":"Plot comparison component functions","code":""},{"path":"https://genentech.github.io/modsculpt/reference/g_comparison.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot comparison of component functions — g_comparison","text":"","code":"g_comparison(   sculptures,   descriptions,   rug_sides = \"b\",   missings_spec = missings_specification(),   facet_spec = facet_specification(),   hue_coloring = FALSE,   logodds_to_prob = FALSE )"},{"path":"https://genentech.github.io/modsculpt/reference/g_comparison.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot comparison of component functions — g_comparison","text":"sculptures List objects classes sculpture. descriptions Character vector model names. length sculptures. rug_sides \"\" none, \"b\", bottom, \"trbl\" 4 sides (see geom_rug) missings_spec Object class missings_specificatoin. facet_spec Object class facet_specificatoin. hue_coloring Logical, use hue-based coloring? Defaults FALSE, meaning predefined colors used instead. logodds_to_prob (logical) valid binary response sculptures built log-odds scale. Defaults FALSE (.e. effect). TRUE, y-values transformed inverse logit function 1 / (1 + exp(-x)).","code":""},{"path":"https://genentech.github.io/modsculpt/reference/g_comparison.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot comparison of component functions — g_comparison","text":"List ggplots (one continuous features, one discrete).","code":""},{"path":"https://genentech.github.io/modsculpt/reference/g_comparison.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot comparison of component functions — g_comparison","text":"first element sculptures works reference sculpture. sculptures must subset variables respect first one (.e. variables less, new ones). allows visualize polished together non-polished sculptures, non-polished one specified first one.","code":""},{"path":"https://genentech.github.io/modsculpt/reference/g_comparison.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot comparison of component functions — g_comparison","text":"","code":"df <- mtcars df$vs <- as.factor(df$vs) model <- rpart::rpart(   hp ~ mpg + carb + vs,   data = df,   control = rpart::rpart.control(minsplit = 10) ) model_predict <- function(x) predict(model, newdata = x) covariates <- c(\"mpg\", \"carb\", \"vs\") pm <- sample_marginals(df[covariates], n = 50, seed = 5)  rs <- sculpt_rough(   dat = pm,   model_predict_fun = model_predict,   n_ice = 10,   seed = 1,   verbose = 0 )  ds <- sculpt_detailed_gam(rs)  # this keeps only \"mpg\" ps <- sculpt_polished(ds, k = 1)  # also define simple labels labels <- structure(   toupper(covariates), # labels   names = covariates # current (old) names )  # Component functions of \"Detailed\" and \"Polished\" are the same for \"mpg\" variable, # therefore red curve overlays the blue one for \"mpg\" comp <- g_comparison(   sculptures = list(rs, ds, ps),   descriptions = c(\"Rough\", \"Detailed\", \"Polished\"),   facet_spec = facet_specification(ncol = 2, labels = labels) ) comp$continuous  comp$discrete"},{"path":"https://genentech.github.io/modsculpt/reference/g_component.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot component functions — g_component","title":"Plot component functions — g_component","text":"Plot component functions","code":""},{"path":"https://genentech.github.io/modsculpt/reference/g_component.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot component functions — g_component","text":"","code":"g_component(   object,   rug_sides = \"b\",   missings_spec = missings_specification(),   facet_spec = facet_specification(),   logodds_to_prob = FALSE )"},{"path":"https://genentech.github.io/modsculpt/reference/g_component.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot component functions — g_component","text":"object Object class sculpture. rug_sides \"\" none, \"b\", bottom, \"trbl\" 4 sides (see geom_rug) missings_spec Object class missings_specificatoin. facet_spec Object class facet_specificatoin. logodds_to_prob (logical) valid binary response sculptures built log-odds scale. Defaults FALSE (.e. effect). TRUE, y-values transformed inverse logit function 1 / (1 + exp(-x)).","code":""},{"path":"https://genentech.github.io/modsculpt/reference/g_component.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot component functions — g_component","text":"List ggplots (one continuous features, one discrete).","code":""},{"path":"https://genentech.github.io/modsculpt/reference/g_component.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot component functions — g_component","text":"","code":"df <- mtcars df$vs <- as.factor(df$vs) model <- rpart::rpart(   hp ~ mpg + carb + vs,   data = df,   control = rpart::rpart.control(minsplit = 10) ) model_predict <- function(x) predict(model, newdata = x) covariates <- c(\"mpg\", \"carb\", \"vs\") pm <- sample_marginals(df[covariates], n = 50, seed = 5)  rs <- sculpt_rough(   dat = pm,   model_predict_fun = model_predict,   n_ice = 10,   seed = 1,   verbose = 0 )  ds <- sculpt_detailed_gam(rs)  g_component(ds)$continuous"},{"path":"https://genentech.github.io/modsculpt/reference/g_density_ice.html","id":null,"dir":"Reference","previous_headings":"","what":"Density plots overlaid with ICE curves — g_density_ice","title":"Density plots overlaid with ICE curves — g_density_ice","text":"Create density plot data, overlaid ICE curves quantiles variable(s) interest.","code":""},{"path":"https://genentech.github.io/modsculpt/reference/g_density_ice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Density plots overlaid with ICE curves — g_density_ice","text":"","code":"g_density_ice_plot(   object,   new_data,   var_name,   var_label = NULL,   qtiles = seq(0, 1, by = 0.1),   task = c(\"regression\", \"classification\") )  g_density_ice_plot_list(   object,   new_data,   var_names,   var_labels = NULL,   qtiles = seq(0, 1, by = 0.1),   task = c(\"regression\", \"classification\") )"},{"path":"https://genentech.github.io/modsculpt/reference/g_density_ice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Density plots overlaid with ICE curves — g_density_ice","text":"object Object class sculpture (rough, detailed) new_data Data make quantiles var_name String specifying variable generate ICE var_label String (optional) specifying variable label (x label plot) qtiles Quantiles generate ICE curves task Prediction task type (regression classification) var_names Vector strings specifying variables generate ICE var_labels Named vector strings specifying variable labels.","code":""},{"path":"https://genentech.github.io/modsculpt/reference/g_density_ice.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Density plots overlaid with ICE curves — g_density_ice","text":"g_density_ice_plot(): ggplot object g_density_ice_plot_list(): list ggplot objects","code":""},{"path":"https://genentech.github.io/modsculpt/reference/g_density_ice.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Density plots overlaid with ICE curves — g_density_ice","text":"g_density_ice_plot() creates density plot single variable. g_density_ice_plot_list() creates list density plots multiple variables. functions amenable 1st-order model without interaction terms, however implemented yet, handling predict() function output binary endpoint","code":""},{"path":"https://genentech.github.io/modsculpt/reference/g_density_ice.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Density plots overlaid with ICE curves — g_density_ice","text":"","code":"if (FALSE) { df <- mtcars df$cyl <- as.factor(df$cyl) model <- lm(hp ~ ., data = df) model_predict <- function(x) predict(model, newdata = x) covariates <- setdiff(colnames(df), \"hp\") pm <- sample_marginals(df[covariates], n = 50, seed = 5)  rs <- sculpt_rough(   dat = pm,   model_predict_fun = model_predict,   n_ice = 5,   seed = 1,   verbose = 0 )  g_density_ice_plot(rs, new_data = pm, var_name = \"mpg\") g_list <- g_density_ice_plot_list(   rs, new_data = pm, var_names = c(\"mpg\", \"cyl\", \"disp\", \"drat\") ) grid::grid.draw(gridExtra::arrangeGrob(grobs = g_list)) }"},{"path":"https://genentech.github.io/modsculpt/reference/g_ice.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot centered ICE profiles with centered PDP curves — g_ice","title":"Plot centered ICE profiles with centered PDP curves — g_ice","text":"Plot centered ICE profiles centered PDP curves","code":""},{"path":"https://genentech.github.io/modsculpt/reference/g_ice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot centered ICE profiles with centered PDP curves — g_ice","text":"","code":"g_ice(   object,   centered = TRUE,   show_PDP = TRUE,   coloured = FALSE,   rug_sides = \"b\",   missings_spec = missings_specification(),   facet_spec = facet_specification(),   logodds_to_prob = FALSE )"},{"path":"https://genentech.github.io/modsculpt/reference/g_ice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot centered ICE profiles with centered PDP curves — g_ice","text":"object Object classes rough sculpture. centered logical, centered ice plots? Defaults TRUE. show_PDP logical, show PDP line? Defaults TRUE. coloured logical, coloured curves? Defaults FALSE. rug_sides \"\" none, \"b\", bottom, \"trbl\" 4 sides (see geom_rug) missings_spec Object class missings_specificatoin. facet_spec Object class facet_specificatoin. logodds_to_prob (logical) valid binary response sculptures built log-odds scale. Defaults FALSE (.e. effect). TRUE, y-values transformed inverse logit function 1 / (1 + exp(-x)).","code":""},{"path":"https://genentech.github.io/modsculpt/reference/g_ice.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot centered ICE profiles with centered PDP curves — g_ice","text":"List ggplots (one continuous features, one discrete).","code":""},{"path":"https://genentech.github.io/modsculpt/reference/g_ice.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot centered ICE profiles with centered PDP curves — g_ice","text":"","code":"df <- mtcars df$vs <- as.factor(df$vs) model <- rpart::rpart(   hp ~ mpg + carb + vs,   data = df,   control = rpart::rpart.control(minsplit = 10) ) model_predict <- function(x) predict(model, newdata = x) covariates <- c(\"mpg\", \"carb\", \"vs\") pm <- sample_marginals(df[covariates], n = 50, seed = 5)  rs <- sculpt_rough(   dat = pm,   model_predict_fun = model_predict,   n_ice = 10,   seed = 1,   verbose = 0 )  g_ice(rs)$continuous"},{"path":"https://genentech.github.io/modsculpt/reference/g_var_imp.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot variable importances and cumulative approximation of R^2 — g_var_imp","title":"Plot variable importances and cumulative approximation of R^2 — g_var_imp","text":"Plot variable importances cumulative approximation R^2","code":""},{"path":"https://genentech.github.io/modsculpt/reference/g_var_imp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot variable importances and cumulative approximation of R^2 — g_var_imp","text":"","code":"g_var_imp(   object,   feat_labels = NULL,   textsize = 16,   top_k = NULL,   pdp_plot_sample = TRUE,   show_pdp_plot = TRUE,   normalized_var = TRUE,   logodds_to_prob = FALSE,   plot_ratios = if (show_pdp_plot) c(3, 2, 2) else c(3, 2) )"},{"path":"https://genentech.github.io/modsculpt/reference/g_var_imp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot variable importances and cumulative approximation of R^2 — g_var_imp","text":"object (sculpture) feat_labels (NULL) named character vector providing variable labels. textsize Size text. top_k (NULL) number show k important variables. pdp_plot_sample (logical) Sample PDP faster ploting? Defaults TRUE. show_pdp_plot (logical) Show plot PDP ranges? Defaults TRUE. normalized_var (logical) Show normalized variance? Defaults TRUE. logodds_to_prob (logical) valid binary response sculptures built log-odds scale. Defaults FALSE (.e. effect). TRUE, y-values transformed inverse logit function 1 / (1 + exp(-x)). plot_ratios (numeric) Used layout matrix gridExtra::arrangeGrob(). show_pdp_plot, default c(3,2,2), making first plot 3 units wide two plots 2 units wide. !show_pdp_plot, default c(3,2), making first plot 3 units wide second plot 2 units wide. Note length needs 3 show_pdp_plot 2 !show_pdp_plot.","code":""},{"path":"https://genentech.github.io/modsculpt/reference/g_var_imp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot variable importances and cumulative approximation of R^2 — g_var_imp","text":"grob. Use grid::grid.draw plot output (grid::grid.newpage resets plotting area).","code":""},{"path":"https://genentech.github.io/modsculpt/reference/g_var_imp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot variable importances and cumulative approximation of R^2 — g_var_imp","text":"","code":"df <- mtcars df$vs <- as.factor(df$vs) model <- rpart::rpart(   hp ~ mpg + carb + vs,   data = df,   control = rpart::rpart.control(minsplit = 10) ) model_predict <- function(x) predict(model, newdata = x) covariates <- c(\"mpg\", \"carb\", \"vs\") pm <- sample_marginals(df[covariates], n = 50, seed = 5)  rs <- sculpt_rough(   dat = pm,   model_predict_fun = model_predict,   n_ice = 10,   seed = 1,   verbose = 0 )  # optionally define labels labels <- structure(   toupper(covariates), # labels   names = covariates # current (old) names ) vi <- g_var_imp(rs, feat_labels = labels) grid::grid.draw(vi)"},{"path":"https://genentech.github.io/modsculpt/reference/metrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Various metrics for measuring model performance. — metrics","title":"Various metrics for measuring model performance. — metrics","text":"Various metrics measuring model performance.","code":""},{"path":"https://genentech.github.io/modsculpt/reference/metrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Various metrics for measuring model performance. — metrics","text":"","code":"score_log_loss(y, y_hat, na_rm = FALSE)  score_quadratic(y, y_hat, na_rm = FALSE)  check_score_fun(score_fun)  metrics_unc(score_fun, y, na_rm = FALSE)  metrics_R2(score_fun, y, y_hat, na_rm = FALSE)  metrics_fit_calib(y, y_hat)  metrics_DI(score_fun, y, y_hat_calib, na_rm = FALSE)  metrics_MI(score_fun, y, y_hat, y_hat_calib, na_rm = FALSE)  metrics_r2(y, y_hat, y_hat_calib, na_rm = FALSE)"},{"path":"https://genentech.github.io/modsculpt/reference/metrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Various metrics for measuring model performance. — metrics","text":"y Vector observations. y_hat Vector predictions. na_rm Logical, defaults FALSE. NAs removed? score_fun scoring function: score_quadratic, score_log_loss, user-defined scoring rule. See details. y_hat_calib Vector calibrated predictions. See details.","code":""},{"path":"https://genentech.github.io/modsculpt/reference/metrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Various metrics for measuring model performance. — metrics","text":"metrics_fit_calib returns mgcv::gam() model fit, otherwise number.","code":""},{"path":"https://genentech.github.io/modsculpt/reference/metrics.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Various metrics for measuring model performance. — metrics","text":"score_log_loss(): Binary log loss score score_quadratic(): Quadratic score check_score_fun(): Utility function checking properties user-defined score_fun. metrics_unc(): Uncertainty metrics_R2(): R^2 metric metrics_fit_calib(): Fit calibration curve using mgcv::gam(). Note NAs always dropped. metrics_DI(): Discrimination index metrics_MI(): Miscalibration index metrics_r2(): r^2 metric based slope lm","code":""},{"path":"https://genentech.github.io/modsculpt/reference/metrics.html","id":"scoring-function","dir":"Reference","previous_headings":"","what":"Scoring function","title":"Various metrics for measuring model performance. — metrics","text":"One can use predefined scores like score_quadratic score_log_loss. fit needs, user-defined scoring function can also used. function needs take exactly 3 arguments: y (truth values), y_hat (estimated values), na_rm (NAs removed?): y y_hat numeric (factors!) na_rm scalar logical needs return number. utility function check_score_fun check user-defined function programmed correctly. checks input output, actual returned value makes sense.","code":""},{"path":"https://genentech.github.io/modsculpt/reference/metrics.html","id":"calibration","dir":"Reference","previous_headings":"","what":"Calibration","title":"Various metrics for measuring model performance. — metrics","text":"obtain calibrated predictions, fit calibration model predict based model. Users can use calibration model make use metrics_fit_calib, fits mgcv::gam() model smoother mgcv::s(., k = -1) (automatic knot selection). input y factor, binomial family used, otherwise gaussian. NAs always dropped. Continuous response example:   Binary response example:   binary case, make sure : y factor correct level setting. Usually \"0\" reference (first) level \"1\" event (second level). may clash yardstick setting first level default \"event\" level. y_hat probabilities (log odds). returned calibrated predictions calib_pred also probabilities setting type = \"response\".","code":"calibration_model <- metrics_fit_calib(   y = truth,   y_hat = prediction ) calib_pred <- predict(calibration_model) calibration_model <- metrics_fit_calib(   y = factor(truth, levels = c(\"0\", \"1\")),   y_hat = prediction ) calib_pred <- predict(calibration_model, type = \"response\")"},{"path":"https://genentech.github.io/modsculpt/reference/metrics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Various metrics for measuring model performance. — metrics","text":"","code":"# Scores score_quadratic(y = c(1.34, 2.8), y_hat = c(1.34, 2.8)) # must be 0 #> [1] 0 score_quadratic(y = 0.5, 0) # must be 0.5**2 = 0.25 #> [1] 0.25  score_log_loss(y = c(0, 1), y_hat = c(0.01, 0.9)) # must be close to 0 #> [1] 0.05770543 score_log_loss(y = 0, y_hat = 0) # undefined #> [1] NaN  check_score_fun(score_quadratic) # passes without errors  # Metrics based on `lm` model mod <- lm(hp ~ ., data = mtcars) truth <- mtcars$hp pred <- predict(mod)  # calibration fit and calibrated predictions calib_mod <- metrics_fit_calib(y = truth, y_hat = pred) calib_pred <- predict(calib_mod)  metrics_unc(score_fun = \"score_quadratic\", y = truth) #> [1] 4553.965 metrics_R2(score_fun = \"score_quadratic\", y = truth, y_hat = pred) #> [1] 0.9027993 metrics_DI(score_fun = \"score_quadratic\", y = truth, y_hat_calib = calib_pred) #> [1] 0.9222323 metrics_MI(score_fun = \"score_quadratic\", y = truth, y_hat = pred, y_hat_calib = calib_pred) #> [1] 0.01943302 # Note that R^2 = DI - MI metrics_r2(y = truth, y_hat = pred, y_hat_calib = calib_pred) #> [1] 0.9027993  # Metrics based on `glm` model (logistic regression) # Note the correct setting of levels mod <- glm(factor(vs, levels = c(\"0\", \"1\")) ~ hp + mpg, data = mtcars, family = \"binomial\") truth_fct <- factor(mtcars$vs, levels = c(\"0\", \"1\")) truth_num <- mtcars$vs pred <- predict(mod, type = \"response\") # type = \"response\" returns probabilities  # calibration fit and calibrated predictions calib_mod <- metrics_fit_calib(y = truth_fct, y_hat = pred) calib_pred <- predict(calib_mod, type = \"response\") # type = \"response\" returns probabilities  metrics_unc(score_fun = \"score_quadratic\", y = truth_num) #> [1] 0.2460938 metrics_R2(score_fun = \"score_quadratic\", y = truth_num, y_hat = pred) #> [1] 0.6498564 metrics_DI(score_fun = \"score_quadratic\", y = truth_num, y_hat_calib = calib_pred) #> [1] 0.7358166 metrics_MI(score_fun = \"score_quadratic\", y = truth_num, y_hat = pred, y_hat_calib = calib_pred) #> [1] 0.08596014 # Note that R^2 = DI - MI metrics_r2(y = truth_num, y_hat = pred, y_hat_calib = calib_pred) #> [1] 0.6499537"},{"path":"https://genentech.github.io/modsculpt/reference/missings_specification.html","id":null,"dir":"Reference","previous_headings":"","what":"Instructions for missings vizualisations — missings_specification","title":"Instructions for missings vizualisations — missings_specification","text":"Instructions missings vizualisations","code":""},{"path":"https://genentech.github.io/modsculpt/reference/missings_specification.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Instructions for missings vizualisations — missings_specification","text":"","code":"missings_specification(   vline = FALSE,   hline = FALSE,   values = NULL,   drop_from_plot = FALSE )"},{"path":"https://genentech.github.io/modsculpt/reference/missings_specification.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Instructions for missings vizualisations — missings_specification","text":"vline (logical) vertical line shown? Defaults FALSE. hline (logical) horizontal line shown? Defaults FALSE. values (NULL) single value named vector. Specifies value(-s) stand missing values. NULL, missing value handling carried . single value, assumed value used flagging missing values across continuous variables. named vector, names used refer continuous variables values flagging missing values variable. drop_from_plot (logical) missing values dropped plot? Defaults FALSE.","code":""},{"path":"https://genentech.github.io/modsculpt/reference/missings_specification.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Instructions for missings vizualisations — missings_specification","text":"List class missings_specification.","code":""},{"path":"https://genentech.github.io/modsculpt/reference/missings_specification.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Instructions for missings vizualisations — missings_specification","text":"","code":"if (FALSE) { g_ice(   sculpture,   missings_spec = missings_specification(     vline = TRUE, # show vertical line     values = -1 # NAs in all continuous variables displayed as -1   ) ) }"},{"path":"https://genentech.github.io/modsculpt/reference/modsculpt-package.html","id":null,"dir":"Reference","previous_headings":"","what":"modsculpt: Direct and Indirect Additive Modeling with Model Sculpting — modsculpt-package","title":"modsculpt: Direct and Indirect Additive Modeling with Model Sculpting — modsculpt-package","text":"Additive modeling algorithms crucial working tabular data machine learning. models offer intrinsic interpretability frequently optimal near-optimal performance. many cases linear additive models (fit via classical statistical models using regularized methods, depending number features) optimal performance. However, general may necessary use non-linear functions features use constraints functions ensure trustworthiness. Model Sculpting method developed construct additive models; involves creating strong learner (often black box model optimal performance), extracting additive approximation , pruning negligible features, refining model smoothness feature relevance. package modsculpt provides necessary code implement Model Sculpting pipeline.","code":""},{"path":[]},{"path":"https://genentech.github.io/modsculpt/reference/modsculpt-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"modsculpt: Direct and Indirect Additive Modeling with Model Sculpting — modsculpt-package","text":"Maintainer: Ondrej Slama ondrej.slama@roche.com Authors: Kenta Yoshida yoshida.kenta@gene.com Christina Rabe rabec@gene.com Michel Friesenhahn friesem1@gene.com contributors: F. Hoffmann-La Roche AG [copyright holder, funder]","code":""},{"path":"https://genentech.github.io/modsculpt/reference/parallel_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Set and end parallel computation — parallel_set","title":"Set and end parallel computation — parallel_set","text":"Set end parallel computation","code":""},{"path":"https://genentech.github.io/modsculpt/reference/parallel_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set and end parallel computation — parallel_set","text":"","code":"parallel_set(num_cores = 10, cluster_type = \"fork\")  parallel_end()"},{"path":"https://genentech.github.io/modsculpt/reference/parallel_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set and end parallel computation — parallel_set","text":"num_cores (integer) Number cores. cluster_type (character) Type cluster. One c(\"fork\", \"psock\").","code":""},{"path":"https://genentech.github.io/modsculpt/reference/parallel_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set and end parallel computation — parallel_set","text":"","code":"if (FALSE) { parallel_set(num_cores = 2) # now the code will run on parallel with 2 cores parallel_end() # now the code will run sequentially }"},{"path":"https://genentech.github.io/modsculpt/reference/sample_marginals.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample product marginals dataset — sample_marginals","title":"Sample product marginals dataset — sample_marginals","text":"Sample product marginals dataset","code":""},{"path":"https://genentech.github.io/modsculpt/reference/sample_marginals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample product marginals dataset — sample_marginals","text":"","code":"sample_marginals(dat, n, seed = NULL)"},{"path":"https://genentech.github.io/modsculpt/reference/sample_marginals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample product marginals dataset — sample_marginals","text":"dat Data.frame sample , must include covariates. n Number observations sample. seed NULL seed exact reproducibility.","code":""},{"path":"https://genentech.github.io/modsculpt/reference/sample_marginals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample product marginals dataset — sample_marginals","text":"data.frame number columns n rows.","code":""},{"path":"https://genentech.github.io/modsculpt/reference/sample_marginals.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sample product marginals dataset — sample_marginals","text":"product marginals dataset grid values sampled independently per column (feature) original dataset. aim disentangle correlations features assess feature affects model predictions individually. contain new values per column, may contain new combinations values seen original data. One can also check model behaves unseen observations (new combination features). Note use product marginal dataset model sculpting works features approximately additive model predictions. quite rare case , sculpted models using product marginal dataset expected significantly lower performance conclusions may misleading. One can also try using original data instead product marginals model sculpting see results differ.","code":""},{"path":"https://genentech.github.io/modsculpt/reference/sample_marginals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample product marginals dataset — sample_marginals","text":"","code":"sample_marginals(mtcars, n = 5, seed = 543) #>    mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> 1 14.3   6 145.0 113 3.07 5.250 17.98  0  0    4    1 #> 2 22.8   8 360.0 150 3.92 1.513 16.87  1  0    3    2 #> 3 15.5   8 301.0  97 3.15 1.835 16.70  1  0    3    6 #> 4 14.7   4  75.7 110 4.43 5.250 19.44  0  1    4    3 #> 5 19.7   8 472.0  66 2.76 2.780 17.60  1  0    4    8"},{"path":"https://genentech.github.io/modsculpt/reference/sculpt_detailed_gam.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a detailed model with gam smoother — sculpt_detailed_gam","title":"Create a detailed model with gam smoother — sculpt_detailed_gam","text":"Create detailed model gam smoother","code":""},{"path":"https://genentech.github.io/modsculpt/reference/sculpt_detailed_gam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a detailed model with gam smoother — sculpt_detailed_gam","text":"","code":"sculpt_detailed_gam(rs, missings = NULL, verbose = 0, allow_par = FALSE)"},{"path":"https://genentech.github.io/modsculpt/reference/sculpt_detailed_gam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a detailed model with gam smoother — sculpt_detailed_gam","text":"rs Rough model, .e. object classes rough sculpture. missings (NULL) single value named vector. Specifies value(-s) stand missing values. NULL, missing value handling carried . single value, assumed value used flagging missing values across continuous variables. named vector, names used refer continuous variables values flagging missing values variable. verbose (integer) 0 silent run, > 0 messages. allow_par (logical) Allow parallel computation? Defaults FALSE.","code":""},{"path":"https://genentech.github.io/modsculpt/reference/sculpt_detailed_gam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a detailed model with gam smoother — sculpt_detailed_gam","text":"Object classes detailed sculpture.","code":""},{"path":"https://genentech.github.io/modsculpt/reference/sculpt_detailed_gam.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a detailed model with gam smoother — sculpt_detailed_gam","text":"parallel computation, use parallel_set() set allow_par TRUE. Note parallel computation may fail model big enough memory.","code":""},{"path":"https://genentech.github.io/modsculpt/reference/sculpt_detailed_gam.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a detailed model with gam smoother — sculpt_detailed_gam","text":"","code":"df <- mtcars df$vs <- as.factor(df$vs) model <- rpart::rpart(   hp ~ mpg + carb + vs,   data = df,   control = rpart::rpart.control(minsplit = 10) ) model_predict <- function(x) predict(model, newdata = x) covariates <- c(\"mpg\", \"carb\", \"vs\") pm <- sample_marginals(df[covariates], n = 50, seed = 5)  rs <- sculpt_rough(   dat = pm,   model_predict_fun = model_predict,   n_ice = 10,   seed = 1,   verbose = 0 )  ds <- sculpt_detailed_gam(rs) class(ds) #> [1] \"detailed\"  \"sculpture\" \"list\""},{"path":"https://genentech.github.io/modsculpt/reference/sculpt_detailed_generic.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a detailed model with user defined smoother — sculpt_detailed_generic","title":"Create a detailed model with user defined smoother — sculpt_detailed_generic","text":"Create detailed model user defined smoother","code":""},{"path":"https://genentech.github.io/modsculpt/reference/sculpt_detailed_generic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a detailed model with user defined smoother — sculpt_detailed_generic","text":"","code":"sculpt_detailed_generic(   rs,   smoother_fit,   smoother_predict,   missings = NULL,   verbose = 0,   allow_par = FALSE )"},{"path":"https://genentech.github.io/modsculpt/reference/sculpt_detailed_generic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a detailed model with user defined smoother — sculpt_detailed_generic","text":"rs Rough model, .e. object classes rough sculpture. smoother_fit Smoother fitting function. smoother_predict Smoother prediction function. missings (NULL) single value named vector. Specifies value(-s) stand missing values. NULL, missing value handling carried . single value, assumed value used flagging missing values across continuous variables. named vector, names used refer continuous variables values flagging missing values variable. verbose (integer) 0 silent run, > 0 messages. allow_par (logical) Allow parallel computation? Defaults FALSE.","code":""},{"path":"https://genentech.github.io/modsculpt/reference/sculpt_detailed_generic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a detailed model with user defined smoother — sculpt_detailed_generic","text":"Object classes detailed sculpture.","code":""},{"path":"https://genentech.github.io/modsculpt/reference/sculpt_detailed_generic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a detailed model with user defined smoother — sculpt_detailed_generic","text":"parallel computation, use parallel_set() set allow_par TRUE. Note parallel computation may fail model big enough memory.","code":""},{"path":"https://genentech.github.io/modsculpt/reference/sculpt_detailed_generic.html","id":"custom-smoothers","dir":"Reference","previous_headings":"","what":"Custom smoothers","title":"Create a detailed model with user defined smoother — sculpt_detailed_generic","text":"none predefined smoothers (sculpt_detailed_gam(), sculpt_detailed_lm()) suits needs, can define smoothers. need define 2 functions: smoother_fit smoother_predict: smoother_fit takes 5 arguments (\"x\", \"y\", \"is_discrete\", \"column_name\", \"na_ind\") returns model fit. \"x\" feature values, \"y\" PDP values, \"is_discrete\" flags discrete feature, \"column_name\" holds feature name, \"na_ind\" passes NA value missings (NULL default). smoother_predict takes also 5 arguments (\"smoother\", \"new_x\", \"is_discrete\", \"column_name\", \"na_ind\") returns predictions vector. \"smoother\" model fit returned smoother_fit, \"new_x\" feature values want predict, \"is_discrete\", \"column_name\", \"na_ind\" purpose smoother_fit. See also Examples.","code":""},{"path":"https://genentech.github.io/modsculpt/reference/sculpt_detailed_generic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a detailed model with user defined smoother — sculpt_detailed_generic","text":"","code":"df <- mtcars df$vs <- as.factor(df$vs) model <- rpart::rpart(   hp ~ mpg + carb + vs,   data = df,   control = rpart::rpart.control(minsplit = 10) ) model_predict <- function(x) predict(model, newdata = x) covariates <- c(\"mpg\", \"carb\", \"vs\") pm <- sample_marginals(df[covariates], n = 50, seed = 5)  rs <- sculpt_rough(   dat = pm,   model_predict_fun = model_predict,   n_ice = 10,   seed = 1,   verbose = 0 )  # define custom smoother # - gam with 3 knots for variable \"mpg\" # - gam with 5 knots for variable \"carb\" # - lm for any discrete variable library(mgcv) #> Loading required package: nlme #> This is mgcv 1.9-1. For overview type 'help(\"mgcv-package\")'. my_smoother <- function(x, y, is_discrete, column_name, na_ind = NULL) {   if (column_name == \"mpg\") {     gam(y ~ s(x, k = 3))   } else if (column_name == \"carb\") {     gam(y ~ s(x, k = 5))   } else if (is_discrete) {     lm(y ~ x)   } else {     stop(\"Undefined smoother\")   } }  # define appropriate predict function # - predict.gam returns an array, we need to convert it to vector # - if-else branch for illustration purposes my_smoother_predict <- function(smoother, new_x, is_discrete, column_name, na_ind = NULL) {   if (inherits(smoother, \"gam\")) {     # as.numeric: convert array to vector     as.numeric(predict(smoother, newdata = data.frame(x = new_x)))   } else {     predict(smoother, newdata = data.frame(x = new_x))   } }  ds <- sculpt_detailed_generic(   rs = rs,   smoother_fit = my_smoother,   smoother_predict = my_smoother_predict ) class(ds) #> [1] \"detailed\"  \"sculpture\" \"list\"      if (FALSE) { # see components g_component(ds)$continuous }   # another example with constrained gam (cgam) package if (FALSE) { library(cgam)  cgam_smoother <- function(x, y, is_discrete, column_name, na_ind = NULL) {   if (column_name == \"carb\") {     cgam(y ~ s.incr(x, numknots = 3))   } else if (column_name == \"mpg\") {     cgam(y ~ s.decr(x, numknots = 3))   } else {     cgam(y ~ x)   } }  cgam_predict <- function(smoother, new_x, is_discrete, column_name, na_ind = NULL) {   predict(smoother, newData = data.frame(x = new_x))$fit }  ds2 <- sculpt_detailed_generic(   rs = rs,   smoother_fit = cgam_smoother,   smoother_predict = cgam_predict )  # see components g_component(ds2)$continuous }"},{"path":"https://genentech.github.io/modsculpt/reference/sculpt_detailed_lm.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a detailed model with lm smoother — sculpt_detailed_lm","title":"Create a detailed model with lm smoother — sculpt_detailed_lm","text":"Create detailed model lm smoother","code":""},{"path":"https://genentech.github.io/modsculpt/reference/sculpt_detailed_lm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a detailed model with lm smoother — sculpt_detailed_lm","text":"","code":"sculpt_detailed_lm(rs, missings = NULL, verbose = 0, allow_par = FALSE)"},{"path":"https://genentech.github.io/modsculpt/reference/sculpt_detailed_lm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a detailed model with lm smoother — sculpt_detailed_lm","text":"rs Rough model, .e. object classes rough sculpture. missings (NULL) single value named vector. Specifies value(-s) stand missing values. NULL, missing value handling carried . single value, assumed value used flagging missing values across continuous variables. named vector, names used refer continuous variables values flagging missing values variable. verbose (integer) 0 silent run, > 0 messages. allow_par (logical) Allow parallel computation? Defaults FALSE.","code":""},{"path":"https://genentech.github.io/modsculpt/reference/sculpt_detailed_lm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a detailed model with lm smoother — sculpt_detailed_lm","text":"Object classes detailed sculpture.","code":""},{"path":"https://genentech.github.io/modsculpt/reference/sculpt_detailed_lm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a detailed model with lm smoother — sculpt_detailed_lm","text":"parallel computation, use parallel_set() set allow_par TRUE. Note parallel computation may fail model big enough memory.","code":""},{"path":"https://genentech.github.io/modsculpt/reference/sculpt_detailed_lm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a detailed model with lm smoother — sculpt_detailed_lm","text":"","code":"df <- mtcars df$vs <- as.factor(df$vs) model <- rpart::rpart(   hp ~ mpg + carb + vs,   data = df,   control = rpart::rpart.control(minsplit = 10) ) model_predict <- function(x) predict(model, newdata = x) covariates <- c(\"mpg\", \"carb\", \"vs\") pm <- sample_marginals(df[covariates], n = 50, seed = 5)  rs <- sculpt_rough(   dat = pm,   model_predict_fun = model_predict,   n_ice = 10,   seed = 1,   verbose = 0 )  ds <- sculpt_detailed_lm(rs) class(ds) #> [1] \"detailed\"  \"sculpture\" \"list\""},{"path":"https://genentech.github.io/modsculpt/reference/sculpt_polished.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a polished model — sculpt_polished","title":"Create a polished model — sculpt_polished","text":"Create polished model","code":""},{"path":"https://genentech.github.io/modsculpt/reference/sculpt_polished.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a polished model — sculpt_polished","text":"","code":"sculpt_polished(object, k = NULL, vars = NULL)"},{"path":"https://genentech.github.io/modsculpt/reference/sculpt_polished.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a polished model — sculpt_polished","text":"object Object class sculpture, either rough detailed. k Number important variables keep. vars Vector variables keep.","code":""},{"path":"https://genentech.github.io/modsculpt/reference/sculpt_polished.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a polished model — sculpt_polished","text":"Object classes rough / detailed sculpture.","code":""},{"path":"https://genentech.github.io/modsculpt/reference/sculpt_polished.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a polished model — sculpt_polished","text":"","code":"df <- mtcars df$vs <- as.factor(df$vs) model <- rpart::rpart(   hp ~ mpg + carb + vs,   data = df,   control = rpart::rpart.control(minsplit = 10) ) model_predict <- function(x) predict(model, newdata = x) covariates <- c(\"mpg\", \"carb\", \"vs\") pm <- sample_marginals(df[covariates], n = 50, seed = 5)  rs <- sculpt_rough(   dat = pm,   model_predict_fun = model_predict,   n_ice = 10,   seed = 1,   verbose = 0 )  ds <- sculpt_detailed_gam(rs)  # this keeps only \"mpg\" ps <- sculpt_polished(ds, k = 1)"},{"path":"https://genentech.github.io/modsculpt/reference/sculpt_rough.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a rough model — sculpt_rough","title":"Create a rough model — sculpt_rough","text":"Create rough model","code":""},{"path":"https://genentech.github.io/modsculpt/reference/sculpt_rough.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a rough model — sculpt_rough","text":"","code":"sculpt_rough(   dat,   model_predict_fun,   n_ice = 10,   seed = NULL,   verbose = 0,   allow_par = FALSE,   model_predict_fun_export = NULL,   data_as_marginals = FALSE )"},{"path":"https://genentech.github.io/modsculpt/reference/sculpt_rough.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a rough model — sculpt_rough","text":"dat Data create rough model . Must product marginal dataset (see sample_marginals) covariates (.e. without response). model_predict_fun Function returns predictions given dataset. n_ice Number ICE curves generate. Defaults 10. seed (NULL) seed exact reproducibility. verbose (integer) 0 silent run, > 0 messages. allow_par (logical) Allow parallel computation? Defaults FALSE. model_predict_fun_export parallel computation . parallel backend registered (see parallel_set()), use export variables used model_predict_fun (like model). passed foreach::foreach(..., .export = model_predict_fun_export). data_as_marginals (logical) Use provided data dat already sampled dataset? Defaults FALSE.","code":""},{"path":"https://genentech.github.io/modsculpt/reference/sculpt_rough.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a rough model — sculpt_rough","text":"Object classes rough sculpture.","code":""},{"path":"https://genentech.github.io/modsculpt/reference/sculpt_rough.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a rough model — sculpt_rough","text":"parallel computation, use parallel_set() set allow_par TRUE. Note parallel computation may fail model big enough memory.","code":""},{"path":"https://genentech.github.io/modsculpt/reference/sculpt_rough.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a rough model — sculpt_rough","text":"","code":"df <- mtcars df$vs <- as.factor(df$vs) model <- rpart::rpart(   hp ~ mpg + carb + vs,   data = df,   control = rpart::rpart.control(minsplit = 10) ) model_predict <- function(x) predict(model, newdata = x) covariates <- c(\"mpg\", \"carb\", \"vs\") pm <- sample_marginals(df[covariates], n = 50, seed = 5)  rs <- sculpt_rough(   dat = pm,   model_predict_fun = model_predict,   n_ice = 10,   seed = 1,   verbose = 0 )  class(rs) #> [1] \"rough\"     \"sculpture\" \"list\"      head(predict(rs)) #>         1         2         3         4         5         6  #>  94.25971 177.04543 136.83114 174.91686 136.83114 136.83114   # lm model without interaction -> additive -> same predictions model <- lm(hp ~ mpg + carb + vs, data = df) model_predict <- function(x) predict(model, newdata = x) covariates <- c(\"mpg\", \"carb\", \"vs\") pm <- sample_marginals(df[covariates], n = 50, seed = 5)  rs <- sculpt_rough(   dat = pm,   model_predict_fun = model_predict,   n_ice = 10,   seed = 1,   verbose = 0 )  class(rs) #> [1] \"rough\"     \"sculpture\" \"list\"      head(predict(rs)) #>         1         2         3         4         5         6  #>  94.61787 190.78181 150.66447 143.70887 126.25460 102.95408  head(predict(model, pm)) #>         1         2         3         4         5         6  #>  94.61787 190.78181 150.66447 143.70887 126.25460 102.95408"},{"path":"https://genentech.github.io/modsculpt/reference/var_imp.html","id":null,"dir":"Reference","previous_headings":"","what":"Various metrics related to model sculpting — var_imp","title":"Various metrics related to model sculpting — var_imp","text":"Various metrics related model sculpting","code":""},{"path":"https://genentech.github.io/modsculpt/reference/var_imp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Various metrics related to model sculpting — var_imp","text":"","code":"calc_dir_var_imp(object, newdata = NULL)  calc_cumul_R2(object, newdata = NULL)"},{"path":"https://genentech.github.io/modsculpt/reference/var_imp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Various metrics related to model sculpting — var_imp","text":"object sculpture newdata (Optional) Data calculate importance . omitted, data provided build sculpture used.","code":""},{"path":"https://genentech.github.io/modsculpt/reference/var_imp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Various metrics related to model sculpting — var_imp","text":"data.table direct requested metrics.","code":""},{"path":"https://genentech.github.io/modsculpt/reference/var_imp.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Various metrics related to model sculpting — var_imp","text":"calc_dir_var_imp(): Direct variable importance calc_cumul_R2(): Calculate cumulative approximation R^2","code":""},{"path":"https://genentech.github.io/modsculpt/reference/var_imp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Various metrics related to model sculpting — var_imp","text":"","code":"df <- mtcars df$vs <- as.factor(df$vs) model <- rpart::rpart(   hp ~ mpg + carb + vs,   data = df,   control = rpart::rpart.control(minsplit = 10) ) model_predict <- function(x) predict(model, newdata = x) covariates <- c(\"mpg\", \"carb\", \"vs\") pm <- sample_marginals(df[covariates], n = 50, seed = 5)  rs <- sculpt_rough(   dat = pm,   model_predict_fun = model_predict,   n_ice = 10,   seed = 1,   verbose = 0 )  # show direct variable importance calc_dir_var_imp(rs) #>    feature  variance variance_total     ratio #>     <fctr>     <num>          <num>     <num> #> 1:     mpg 1936.4199       2296.917 0.8430518 #> 2:    carb  346.5405       2296.917 0.1508720 #> 3:      vs    0.0000       2296.917 0.0000000  # show cumulative approximation R^2 calc_cumul_R2(rs) #>    feature       R2 #>     <fctr>    <num> #> 1:     mpg 0.849128 #> 2:    carb 1.000000 #> 3:      vs 1.000000"}]
